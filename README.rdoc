= PlayCaptcha

Author::    Future Ad Labs (with credit to Jason L Perry (http://ambethia.com))
Copyright:: Copyright (c) 2007-2013 Jason L Perry
License::   {MIT}[http://creativecommons.org/licenses/MIT/]

This plugin adds helpers for the {PlayCaptcha API}[http://futureadlabs.com] 
and falls back to the {reCAPTCHA API}[http://recaptcha.net] if required. In your
views you can use the +playcaptcha_tags+ method to embed the needed javascript,
and you can validate in your controllers with +verify_playcaptcha+.

Beforehand you need to configure Recaptcha with your custom private and public
key. You may find detailed examples below. Exceptions will be raised if you
call these methods and the keys can't be found.

== Rails Installation

Place the playcaptcha gem file in the root of your project.

Add the following to your Gemfile:

  gem "playcaptcha", :require => "playcaptcha/rails"

Once this is complete run the following command in the console from the root of your project:

  gem install playcaptcha

Rails apps below 3.0 are not supported.

== Setting up your reCAPTCHA API Keys

This plugin allows a fallback to reCAPTCHA should PlayCaptcha be unavailable.
For reCAPTCHA to work in this situation, your reCAPTCHA public and private keys
must be specified.

To achieve this add the file +config/initializers/playcaptcha.rb+ to your Rails project,
and enter your keys as follows.

  PlayCaptcha.configure do |config|
    config.public_key  = '6Lc6BAAAAAAAAChqRbQZcn_yyyyyyyyyyyyyyyyy'
    config.private_key = '6Lc6BAAAAAAAAKN3DRm6VA_xxxxxxxxxxxxxxxxx'
  end

Replace the public and private keys with the keys for your site.

== To use 'PlayCaptcha'

Add +recaptcha_tags+ to each form you want to protect. eg:

<%= playcaptcha_tags %>

And, add +verify_playcaptcha+ logic to each form action that you've protected.

=== +verify_playcaptcha+

This method returns +true+ or +false+ after processing the parameters from the PlayCaptcha/reCAPTCHA widget.

Passing in the ActiveRecord object is optional, if you do--and the captcha fails to verify--an
error will be added to the object for you to use.

  if verify_playcaptcha(:model => @post, :message => "Oh! It's error with PlayCaptcha!") && @post.save
    # ...
  else
    # ...
  end

Some of the options available:

<tt>:model</tt>::       Model to set errors
<tt>:attribute</tt>::   Model attribute to receive errors (default :base)
<tt>:message</tt>::     Custom error message

  
