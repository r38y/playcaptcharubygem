= PlayCaptcha

Author::    Future Ad Labs (with credit to Jason L Perry (http://ambethia.com))
Copyright:: Copyright (c) 2007-2013 Jason L Perry
License::   {MIT}[http://creativecommons.org/licenses/MIT/]

This plugin adds helpers for the {PlayCaptcha API}[http://futureadlabs.com] 
and falls back to the {reCAPTCHA API}[http://recaptcha.net] if required.

This guide will describe two setup scenarios, the first is for users that just wish to 
use PlayCaptcha, the second is for users who wish to use PlayCaptcha but with a fallback 
to reCAPTCHA if required.

Please note that Rails apps below 3.0 are not supported.

== Stand Alone PlayCaptcha Installation

If you wish to install PlayCaptcha without reCAPTCHA fallback follow the steps in this 
section.

Place the playcaptcha gem file in the root of your project.

Add the following to your Gemfile:

  gem "playcaptcha", :require => "playcaptcha/rails"

Once this is complete run the following command in the console from the root of your project:

  gem install playcaptcha

In the forms you wish to use PlayCaptcha add the following tag:

  <%= playcaptcha_tags %>

For example:

  <%= form_for(@post) do |f| %>
    <div class="field">
      <%= f.label :name %><br />
      <%= f.text_field :name %>
    </div>
    <div class="field">
      <%= f.label :title %><br />
      <%= f.text_field :title %>
    </div>

    <%= playcaptcha_tags %>

    <div class="actions">
      <%= f.submit %>
    </div>
  <% end %>

You should now see PlayCaptcha on your form.

The next step is to discover if the user has successfully completed the PlayCaptcha.
To do this we use the verify_playcaptcha method.

verify_playcaptcha returns a simple true or false result, and can be used as follows:

  if verify_playcaptcha()
    # ...
  else
    # ...
  end

You may also pass in an error message to be used if the verification fails, and a model
to apply this error to:

  if verify_playcaptcha(:model => @post, :message => "Oh No! PlayCaptcha Validation failed!") && @post.save
    # ...
  else
    # ...
  end

You can also specify the attribute of your model to receive the error by using the :attribute parameter.

With these steps complete, PlayCaptcha is fully setup to use.


== PlayCaptcha Installation with Fallback to reCAPTCHA

If you wish to install PlayCaptcha with reCAPTCHA fallback follow the steps in this 
section.

Place the playcaptcha gem file in the root of your project.

Add the following to your Gemfile:

  gem "playcaptcha", :require => "playcaptcha/rails"

Once this is complete run the following command in the console from the root of your project:

  gem install playcaptcha

The next step is to set up your reCAPTCHA API Keys.

To achieve this add the file +config/initializers/playcaptcha.rb+ to your Rails project,
and add the following code to that file.

  PlayCaptcha.configure do |config|
    config.public_key  = '6Lc6BAAAAAAAAChqRbQZcn_yyyyyyyyyyyyyyyyy'
    config.private_key = '6Lc6BAAAAAAAAKN3DRm6VA_xxxxxxxxxxxxxxxxx'
  end

Replace the public and private keys with the keys for your site.

In the forms you wish to use PlayCaptcha add the following tag:

  <%= playcaptcha_tags %>

For example:

  <%= form_for(@post) do |f| %>
    <div class="field">
      <%= f.label :name %><br />
      <%= f.text_field :name %>
    </div>
    <div class="field">
      <%= f.label :title %><br />
      <%= f.text_field :title %>
    </div>

    <%= playcaptcha_tags %>

    <div class="actions">
      <%= f.submit %>
    </div>
  <% end %>

You should now see PlayCaptcha on your form.

The next step is to discover if the user has successfully completed the PlayCaptcha.
To do this we use the verify_playcaptcha method.

verify_playcaptcha returns a simple true or false result, and can be used as follows:

  if verify_playcaptcha()
    # ...
  else
    # ...
  end

You may also pass in an error message to be used if the verification fails, and a model
to apply this error to:

  if verify_playcaptcha(:model => @post, :message => "Oh No! PlayCaptcha Validation failed!") && @post.save
    # ...
  else
    # ...
  end

You can also specify the attribute of your model to receive the error by using the :attribute parameter.

With these steps complete, PlayCaptcha is fully setup to use.